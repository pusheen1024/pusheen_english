0. Создать базу данных, сделать модели таблиц пользователей, их баллов, английских слов и городов с помощью sqlalchemy, заполнить таблицу слов данными из загруженных csv файлов, добавить города из файла txt;
1. Разработать класс MapsAPI с необходимыми функциями для работы с картами, WordsAPI с функциями для генерации слов, предложений и словарных статей с использованием requests и reverso-context-api;
2. Написать базовые шаблоны с использованием HTML, создать обработчики главной страницы сайта, страницы "О сайте";
3. Разработать кроссворд с помощью готового класса WordsAPI и Pillow, написать форму для его заполнения с помощью Flask-wtf, добавить страницу с его проверкой;
4. Разработать задание по страноведению с использованием MapsAPI;
5. Разработать задание по заполнению предложений с использованием WordsAPI, написать форму для него с помощью Flask-wtf, добавить аналогичные страницы с проверкой;
6. Реализовать начисление баллов за правильные ответы в заданиях из п. 3, 4 и 5;
6. Создать формы регистрации и входа в систему, реализовать взаимодействие с БД, применить flask-login;
7. Создать профиль пользователя с аватаром по умолчанию, информацией из БД и набранными баллами, добавить кнопку выхода из аккаунта;
8. Реализовать возможность добавления слова в БД для администратора;
9. Обеспечить хранение некоторых данных пользователя в объекте session;
9. Добавить Javascript, CSS и Bootstrap, нарисовать изображения с Пушином для оформления сайта;
10. Разработать простое Rest API сайта, возвращающее случайные слова и их словарные статьи в формате json;
11. Создать ресурс пользователей и их достижений с помощью Flask-restful;
12. Разработать бота в Telegram, который будет обращаться к API сайта и играть с пользователем в игру-угадайку;
13. Загрузить все файлы (за исключением config.py, который необходимо добавить в .gitignore во избежание потери конфиденциальной информации) на GitHub, выполнить деплой сайта и бота в Glitch.me.
